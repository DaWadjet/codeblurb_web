/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/shopping/add-item/{shoppingCartItem}": {
    post: operations["addItemToShoppingCart"];
  };
  "/payments/stripe/webhooks": {
    post: operations["confirmation"];
  };
  "/payments/checkout": {
    post: operations["checkout"];
  };
  "/content/ratings/{contentBundleId}": {
    post: operations["submitRating"];
  };
  "/content/quiz/solution/{contentId}": {
    post: operations["checkSolutionForQuiz"];
  };
  "/content/code/scratch-solution/{contentId}": {
    post: operations["runSolutionFor"];
  };
  "/content/code/code-quiz-solution/{contentId}": {
    post: operations["checkCodeQuizSolutionFor"];
  };
  "/auth/reset-password": {
    post: operations["resetPassword"];
  };
  "/auth/register": {
    post: operations["register"];
  };
  "/auth/refresh": {
    post: operations["refresh"];
  };
  "/auth/logout": {
    post: operations["logout"];
  };
  "/auth/login": {
    post: operations["login"];
  };
  "/auth/forgot-password": {
    post: operations["forgotPassword"];
  };
  "/auth/force-logout": {
    post: operations["forceLogout"];
  };
  "/auth/change-password": {
    post: operations["changePassword"];
  };
  "/": {
    get: operations["getProfileInfo"];
  };
  "/sync": {
    get: operations["sync"];
  };
  "/shopping/shopping-cart": {
    get: operations["restoreShoppingCart"];
  };
  "/shopping/available-shopping-items": {
    get: operations["getAvailableShoppingItems"];
  };
  "/payments": {
    get: operations["getPreviousPayments"];
  };
  "/content/content-bundles": {
    get: operations["getMyContentBundles"];
  };
  "/content/content-bundles/{contentBundleId}": {
    get: operations["getMyContentBundle"];
  };
  "/shopping/delete-item/{shoppingCartItem}": {
    delete: operations["removeItemFromShoppingCart"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    MinimalContentBundleResponse: {
      /** Format: int32 */
      id?: number;
      includedContent?: components["schemas"]["MinimalContentResponse"][];
      title?: string;
      imageUrl?: string;
      /** @enum {string} */
      skillLevel?: "BEGINNER" | "INTERMEDIATE" | "ADVANCED";
      ratings?: components["schemas"]["RatingsResponse"];
      /** Format: date-time */
      releaseDate?: string;
    };
    MinimalContentResponse: {
      /** Format: int32 */
      id?: number;
      name?: string;
      /** @enum {string} */
      contentType?: "CODING" | "VIDEO" | "QUIZ";
    };
    RatingResponse: {
      /** Format: int32 */
      rating?: number;
      comment?: string;
      username?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    RatingsResponse: {
      /** Format: double */
      averageRating?: number;
      /** Format: int32 */
      numberOfRatings?: number;
      ratings?: components["schemas"]["RatingResponse"][];
    };
    ShoppingCartResponse: {
      shoppingItems?: components["schemas"]["ShoppingItemResponse"][];
    };
    ShoppingItemResponse: {
      /** Format: int32 */
      id?: number;
      title?: string;
      /** Format: double */
      price?: number;
      /** Format: int64 */
      numberOfPurchases?: number;
      contentBundle?: components["schemas"]["MinimalContentBundleResponse"];
      ratings?: components["schemas"]["RatingsResponse"];
    };
    PaymentRequest: {
      successUrl?: string;
      cancelUrl?: string;
    };
    RatingRequest: {
      /** Format: int32 */
      rating: number;
      comment: string;
    };
    QuizSolutionRequest: {
      solutions: {
        [key: string]: number;
      };
    };
    IncorrectQuizSolutionResponse: {
      /** Format: int32 */
      incorrectQuestionId?: number;
      /** Format: int32 */
      incorrectSolutionSent?: number;
      /** Format: int32 */
      correctSolution?: number;
    };
    QuizSolutionResponse: {
      correctAnswerQuestionIds?: number[];
      incorrectSolutions?: components["schemas"]["IncorrectQuizSolutionResponse"][];
    };
    CodeSolutionRequest: {
      code: string;
    };
    CodeSolutionResponse: {
      results?: components["schemas"]["TestCaseOutcomeResponse"][];
      /** @enum {string} */
      overallResult?: "ALL_PASSED" | "TESTCASES_FAILED";
    };
    TestCaseOutcomeResponse: {
      expected?: string;
      actual?: string;
      /** @enum {string} */
      outcome?: "PASSED" | "FAILED";
      hints?: string[];
    };
    CodeQuizSolutionRequest: {
      solutionsByIndex: {
        [key: string]: string;
      };
    };
    CodeQuizSolutionResponse: {
      correctAnswerIndices?: number[];
      incorrectSolutions?: components["schemas"]["IncorrectCodeQuizSolutionResponse"][];
    };
    IncorrectCodeQuizSolutionResponse: {
      /** Format: int32 */
      incorrectSolutionIndex?: number;
      incorrectAnswer?: string;
      correctSolution?: string;
    };
    ResetPasswordRequest: {
      password: string;
    };
    RegisterRequest: {
      username: string;
      password: string;
      email: string;
    };
    RefreshTokenRequest: {
      refreshToken: string;
    };
    RefreshTokenResponse: {
      accessToken?: string;
      refreshToken?: string;
    };
    LoginRequest: {
      username: string;
      password: string;
    };
    LoginResponse: {
      accessToken?: string;
      refreshToken?: string;
    };
    ForgotPasswordRequest: {
      username: string;
    };
    ChangePasswordRequest: {
      oldPassword: string;
      newPassword: string;
    };
    ProfileResponse: {
      username?: string;
      email?: string;
      /** Format: date-time */
      registeredAt?: string;
    };
    SortObject: {
      direction?: string;
      nullHandling?: string;
      ascending?: boolean;
      property?: string;
      ignoreCase?: boolean;
    };
    PageShoppingItemResponse: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["ShoppingItemResponse"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"][];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int64 */
      offset?: number;
      sort?: components["schemas"]["SortObject"][];
      paged?: boolean;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      unpaged?: boolean;
    };
    ContentBundleResponse: {
      /** Format: int32 */
      id?: number;
      title?: string;
      includedContent?: components["schemas"]["ContentResponse"][];
      imageUrl?: string;
      /** @enum {string} */
      skillLevel?: "BEGINNER" | "INTERMEDIATE" | "ADVANCED";
      ratings?: components["schemas"]["RatingsResponse"];
      /** Format: date-time */
      releaseDate?: string;
    };
    ContentResponse: {
      /** Format: int32 */
      id?: number;
      name?: string;
      /** @enum {string} */
      contentType?: "CODING" | "VIDEO" | "QUIZ";
    };
    PaymentResponse: {
      /** @enum {string} */
      status?: "PENDING" | "PAID" | "FAILED";
      boughtContentBundles?: components["schemas"]["ContentBundleResponse"][];
    };
    PreviousPaymentsResponse: {
      previousPayments?: components["schemas"]["PaymentResponse"][];
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    PageMinimalContentBundleResponse: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["MinimalContentBundleResponse"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"][];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    CodingContentResponse: {
      /** Format: int32 */
      id?: number;
      name?: string;
      /** @enum {string} */
      contentType?: "CODING" | "VIDEO" | "QUIZ";
      description?: string;
      codeSkeleton?: string[];
      codeSnippets?: string[];
      testCases?: components["schemas"]["TestCaseResponse"][];
      /** @enum {string} */
      codingContentType?: "SCRATCH" | "DRAG_AND_DROP" | "FILL_THE_GAP";
    };
    QuizContentResponse: {
      /** Format: int32 */
      id?: number;
      name?: string;
      /** @enum {string} */
      contentType?: "CODING" | "VIDEO" | "QUIZ";
      questions?: components["schemas"]["QuizQuestionResponse"][];
    };
    QuizQuestionResponse: {
      /** Format: int32 */
      id?: number;
      question?: string;
      answers?: string[];
      /** Format: int32 */
      solutionIndex?: number;
      solutionChar?: string;
    };
    SeparatedContentBundleResponse: {
      /** Format: int32 */
      id?: number;
      title?: string;
      imageUrl?: string;
      ratings?: components["schemas"]["RatingsResponse"];
      includedVideos?: components["schemas"]["VideoContentResponse"][];
      includedCodings?: components["schemas"]["CodingContentResponse"][];
      includedQuizzes?: components["schemas"]["QuizContentResponse"][];
    };
    TestCaseResponse: {
      input?: string;
      expectedOutput?: string;
    };
    VideoContentResponse: {
      /** Format: int32 */
      id?: number;
      name?: string;
      /** @enum {string} */
      contentType?: "CODING" | "VIDEO" | "QUIZ";
      description?: string;
      resourceUrl?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  addItemToShoppingCart: {
    parameters: {
      path: {
        shoppingCartItem: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ShoppingCartResponse"];
        };
      };
    };
  };
  confirmation: {
    parameters: {
      header: {
        "Stripe-Signature": string;
      };
    };
    requestBody: {
      content: {
        "application/json": string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  checkout: {
    parameters: {
      query: {
        paymentRequest: components["schemas"]["PaymentRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  submitRating: {
    parameters: {
      path: {
        contentBundleId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RatingRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  checkSolutionForQuiz: {
    parameters: {
      path: {
        contentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuizSolutionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["QuizSolutionResponse"];
        };
      };
    };
  };
  runSolutionFor: {
    parameters: {
      path: {
        contentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CodeSolutionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CodeSolutionResponse"];
        };
      };
    };
  };
  checkCodeQuizSolutionFor: {
    parameters: {
      path: {
        contentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CodeQuizSolutionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CodeQuizSolutionResponse"];
        };
      };
    };
  };
  resetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  refresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RefreshTokenResponse"];
        };
      };
    };
  };
  logout: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["LoginResponse"];
        };
      };
    };
  };
  forgotPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForgotPasswordRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  forceLogout: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  changePassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  getProfileInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ProfileResponse"];
        };
      };
    };
  };
  sync: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  restoreShoppingCart: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ShoppingCartResponse"];
        };
      };
    };
  };
  getAvailableShoppingItems: {
    parameters: {
      query: {
        page?: number;
        pageSize?: number;
        skills?: string[];
        title?: string;
        sort: components["schemas"]["SortObject"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PageShoppingItemResponse"];
        };
      };
    };
  };
  getPreviousPayments: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PreviousPaymentsResponse"];
        };
      };
    };
  };
  getMyContentBundles: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PageMinimalContentBundleResponse"];
        };
      };
    };
  };
  getMyContentBundle: {
    parameters: {
      path: {
        contentBundleId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SeparatedContentBundleResponse"];
        };
      };
    };
  };
  removeItemFromShoppingCart: {
    parameters: {
      path: {
        shoppingCartItem: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ShoppingCartResponse"];
        };
      };
    };
  };
}
